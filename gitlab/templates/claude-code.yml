# Claude Code GitLab CI/CD Template
# 
# Include this template in your .gitlab-ci.yml:
#   include:
#     - remote: 'https://raw.githubusercontent.com/YOUR_USERNAME/claude-code-action/main/gitlab/templates/claude-code.yml'
#
# Required CI/CD variables:
#   - CLAUDE_BOT_TOKEN: GitLab Personal Access Token with api and write_repository scopes
#   - ANTHROPIC_API_KEY: Your Anthropic API key (or CLAUDE_CODE_OAUTH_TOKEN for Claude Pro/Teams)
#
# Choose the model here: https://docs.anthropic.com/en/docs/about-claude/models/overview

variables:
  CLAUDE_IMAGE: "node:20-slim"
  CLAUDE_TRIGGER_PHRASE: "@claude"
  CLAUDE_BRANCH_PREFIX: "claude/"
  # CLAUDE_MODEL: "claude-3-sonnet-20240229"
  CLAUDE_TIMEOUT_MINUTES: "30"
  CLAUDE_MAX_TURNS: "25"

.claude-base:
  image: $CLAUDE_IMAGE
  before_script:
    # Install git, bun, and jq
    - apt-get update && apt-get install -y git curl unzip jq
    - curl -fsSL https://bun.sh/install | bash
    - export PATH="$HOME/.bun/bin:$PATH"
    
    # Configure git
    - git config --global safe.directory "$CI_PROJECT_DIR"
    
    # Clone the repository with the bot token
    - git clone https://oauth2:${CLAUDE_BOT_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git /tmp/repo
    - cd /tmp/repo
    - git checkout $CI_COMMIT_REF_NAME || git checkout -b $CI_COMMIT_REF_NAME origin/$CI_COMMIT_REF_NAME
    
    # Install Claude Code CLI
    - npm install -g @anthropic-ai/claude-code
    
    # Clone and install Claude Code GitLab from GitHub
    - git clone https://github.com/L-U-C-K-Y/claude-code-action.git /tmp/claude-code-action
    - cd /tmp/claude-code-action/gitlab && bun install
    - chmod +x /tmp/claude-code-action/gitlab/src/main.ts
    - export PATH="/tmp/claude-code-action/gitlab/src:$PATH"
    
  variables:
    GITLAB_TOKEN: $CLAUDE_BOT_TOKEN
    GIT_STRATEGY: none  # We clone manually with the bot token
  
  artifacts:
    when: always
    paths:
      - claude-*.log
    expire_in: 1 week

# Trigger on MR comments
claude-on-mr-comment:
  extends: .claude-base
  rules:
    # Trigger when MR is updated (includes new comments)
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
  script:
    - cd /tmp/repo
    - /tmp/claude-code-action/gitlab/src/main.ts 2>&1 | tee $CI_PROJECT_DIR/claude-mr-${CI_MERGE_REQUEST_IID}.log

# Trigger on issue comments
claude-on-issue-comment:
  extends: .claude-base
  rules:
    # GitLab doesn't have direct issue comment triggers, so we use commit message
    - if: $CI_COMMIT_MESSAGE =~ /\#[0-9]+.*@claude/
      when: always
  script:
    - cd /tmp/repo
    # Extract issue number from commit message
    - export CI_ISSUE_IID=$(echo "$CI_COMMIT_MESSAGE" | grep -oE '#[0-9]+' | head -1 | sed 's/#//')
    - echo "Detected issue #$CI_ISSUE_IID from commit message"
    - /tmp/claude-code-action/gitlab/src/main.ts 2>&1 | tee $CI_PROJECT_DIR/claude-issue-${CI_ISSUE_IID}.log

# Trigger on MR assignment
claude-on-mr-assign:
  extends: .claude-base
  rules:
    # Check if claude-bot is in assignees
    - if: '$CI_MERGE_REQUEST_ASSIGNEES =~ /claude-bot/'
      when: always
  script:
    - cd /tmp/repo
    - /tmp/claude-code-action/gitlab/src/main.ts 2>&1 | tee $CI_PROJECT_DIR/claude-mr-${CI_MERGE_REQUEST_IID}.log

# Trigger on label
claude-on-label:
  extends: .claude-base
  rules:
    # Check for claude label
    - if: '$CI_MERGE_REQUEST_LABELS =~ /claude/'
      when: always
  script:
    - cd /tmp/repo
    - /tmp/claude-code-action/gitlab/src/main.ts 2>&1 | tee $CI_PROJECT_DIR/claude-mr-${CI_MERGE_REQUEST_IID}.log

# Manual trigger for testing
claude-manual:
  extends: .claude-base
  rules:
    - when: manual
  script:
    - cd /tmp/repo
    - |
      if [ -n "$CI_MERGE_REQUEST_IID" ]; then
        echo "Running for MR #$CI_MERGE_REQUEST_IID"
      else
        echo "Running in manual mode - please set CI_ISSUE_IID or CI_MERGE_REQUEST_IID"
      fi
    - /tmp/claude-code-action/gitlab/src/main.ts 2>&1 | tee $CI_PROJECT_DIR/claude-manual.log